{"version":3,"sources":["services/populations.js","services/emissions.js","services/countries.js","components/Notification.js","components/Header.js","components/Search.js","components/Result.js","components/ResultOptions.js","App.js","index.js"],"names":["fetchData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","wrap","_context","prev","next","axios","get","sent","abrupt","format","data","stop","this","_x","apply","arguments","map","x","year","date","value","reverse","services_populations","getByISO","ISO","concat","services_emissions","formated","iso2Code","label","name","sort","b","services_countries","Notification","notification","react_default","createElement","className","messageClass","message","Header","title","subtitle","Search","countries","setSelected","selected","undefined","react_select_esm","onChange","options","theme","objectSpread","colors","primary25","primary","Result","populations","emissions","perCapita","rangeValue","loading","react_spinners","sizeUnit","size","color","filteredPopulations","filter","population","min","max","filteredEmissions","emission","weightUnit","chartData","labels","datasets","fill","backgroundColor","borderColor","pointBorderColor","pointBackgroundColor","pointRadius","pointHitRadius","i","legend","display","tooltips","displayColors","scales","yAxes","scaleLabel","labelString","xAxes","responsive","maintainAspectRatio","es","ResultOptions","togglePerCapita","setRange","rangeLimits","react_switch_default","checked","js_default","maxValue","minValue","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSelectedChange","setState","populationService","emissionsService","notify","handleRangeChange","handlePerCapitaChange","setTimeout","state","countriesService","Number","length","components_Notification","components_Header","components_Search","components_ResultOptions","components_Result","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e40538e0.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst getByISO = (ISO) => {\n    const url = `https://api.worldbank.org/v2/countries/${ISO}/indicators/SP.POP.TOTL?per_page=100&format=json`\n    return fetchData(url)\n}\n\nconst fetchData = async (url) => {\n    const response = await axios.get(url)\n    return format(response.data)\n}\n\nconst format = (data) => {\n    if (data[1] === null) return null\n    const formated = data[1].map(x => {\n        return ({\n            \"year\": x.date,\n            \"value\": x.value\n        })\n    })\n\n    return formated.reverse()\n}\n\nexport default { getByISO }","import axios from 'axios'\n\nconst getByISO = (ISO) => {\n    const url = `https://api.worldbank.org/v2/countries/${ISO}/indicators/EN.ATM.CO2E.KT?per_page=100&format=json`\n    return fetchData(url)\n}\n\nconst fetchData = async (url) => {\n    const response = await axios.get(url)\n    return format(response.data)\n}\n\nconst format = (data) => {\n    if (data[1] === null) return null\n    const formated = data[1].map(x => {\n        return ({\n            \"year\": x.date,\n            \"value\": x.value\n        })\n    })\n\n    return formated.reverse()\n}\n\nexport default { getByISO }","import axios from 'axios'\n\nconst getAll = () => {\n    const url = 'https://api.worldbank.org/v2/country?per_page=500&format=json'\n    return fetchData(url)\n}\n\nconst fetchData = async (url) => {\n    const response = await axios.get(url)\n    return format(response.data)\n}\n\nconst format = (data) => {\n    const formated = data[1].map(x => {\n        return ({\n            \"value\": x.iso2Code,\n            \"label\": x.name\n        })\n    })\n\n    formated.sort((a, b) => (a.label > b.label) ? 1 : -1)\n    return formated\n}\n\nexport default { getAll }","import React from 'react'\nimport '../styles/notification.css'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n    return (\n        <div className={'notification ' + notification.messageClass}>\n            {notification.message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nimport '../styles/header.css'\n\nconst Header = ({title, subtitle}) => {\n    return (\n        <div className='header'>\n            <div className='title'>\n                {title}\n            </div>\n            <div className='subtitle'>\n                {subtitle}\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport Select from 'react-select'\n\nimport '../styles/search.css'\n\nconst Search = ({ countries, setSelected, selected }) => {\n    if (countries === undefined) return null\n\n    return (\n        <div className='search'>\n            <Select\n                value={selected}\n                onChange={setSelected}\n                options={countries}\n                theme={(theme) => ({\n                    ...theme,\n                    colors: {\n                        ...theme.colors,\n                        primary25: '#eeeeee',\n                        primary: '#555555',\n                    },\n                })} />\n        </div>\n    )\n}\n\nexport default Search","import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { RingLoader, ClipLoader } from 'react-spinners'\n\n\nimport '../styles/result.css'\n\nconst Result = ({ populations, emissions, selected, perCapita, rangeValue, loading }) => {\n    if (populations === null || emissions === null || selected === null || rangeValue === null) {\n        return (\n            <div className='result'>\n                <RingLoader\n                    sizeUnit={'px'}\n                    size={50}\n                    color={'#db2b00'}\n                />\n            </div>\n        )\n    } else {\n        const filteredPopulations = populations.filter(population => rangeValue.min <= population.year && rangeValue.max >= population.year)\n        const filteredEmissions = emissions.filter(emission => rangeValue.min <= emission.year && rangeValue.max >= emission.year)\n\n        const labels = filteredEmissions.map(emission => emission.year)\n        const data = perCapita ?\n            filteredEmissions.map((emission, i) => emission.value ? (emission.value / filteredPopulations[i].value) * 1000000 : null)\n            :\n            filteredEmissions.map(emission => emission.value)\n\n        const weightUnit = perCapita ? 'kg' : 'kt'\n\n        const chartData = {\n            labels: labels,\n            datasets: [{\n                label: weightUnit,\n                fill: false,\n                backgroundColor: 'rgba(219, 43, 0, 0.5)',\n                borderColor: 'rgba(219, 43, 0, 1)',\n                pointBorderColor: 'rgba(219, 43, 0, 1)',\n                pointBackgroundColor: 'rgb(255, 255, 255)',\n                pointRadius: 2,\n                pointHitRadius: 6,\n                data: data,\n            }]\n        }\n\n        const options = {\n            legend: {\n                display: false\n            },\n            tooltips: {\n                displayColors: false\n            },\n            scales: {\n                yAxes: [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Emissions (' + weightUnit + ')'\n                    }\n                }],\n                xAxes: [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Year'\n                    }\n                }]\n            },\n            responsive: true,\n            maintainAspectRatio: false\n        }\n\n        return (\n            <div className='result'>\n                <ClipLoader\n                    sizeUnit={'px'}\n                    size={30}\n                    color={'#db2b00'}\n                    loading={loading}\n                />\n                <Line data={chartData} options={options} />\n            </div>\n        )\n    }\n}\n\nexport default Result","import React from 'react'\nimport InputRange from 'react-input-range'\nimport Switch from 'react-switch'\n\nimport '../styles/resultOptions.css'\n\nconst ResultOptions = ({ perCapita, togglePerCapita, rangeValue, setRange, rangeLimits }) => {\n\n    if (togglePerCapita === null || rangeValue === null || rangeLimits === null) {\n        return null\n    }\n\n    return (\n        <div className='resultOptions'>\n            <div className='perCapita'>\n                <Switch onChange={togglePerCapita} checked={perCapita} />\n                <label>Per Capita</label>\n            </div>\n\n            <InputRange\n                maxValue={rangeLimits.max}\n                minValue={rangeLimits.min}\n                value={rangeValue}\n                onChange={value => setRange(value)} />\n        </div>\n    )\n}\n\nexport default ResultOptions","import React, { Component } from 'react'\n\nimport populationService from './services/populations'\nimport emissionsService from './services/emissions'\nimport countriesService from './services/countries'\n\nimport Notification from './components/Notification'\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport Result from './components/Result'\nimport ResultOptions from './components/ResultOptions'\n\nimport './styles/styles.css'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            countries: [],\n            selected: {\n                value: '1W',\n                label: 'World'\n            },\n            rangeValue: null,\n            rangeLimits: null,\n            populations: null,\n            emissions: null,\n            perCapita: false,\n            notification: null,\n            loading: false\n        }\n    }\n\n    async componentDidMount() {\n        const countries = await countriesService.getAll()\n        const populations = await populationService.getByISO(this.state.selected.value)\n        const emissions = await emissionsService.getByISO(this.state.selected.value)\n        const rangeValue = {\n            min: Number(emissions[0].year),\n            max: Number(emissions[emissions.length - 1].year)\n        }\n        const rangeLimits = rangeValue\n        this.setState({ countries, populations, emissions, rangeValue, rangeLimits })\n    }\n\n    handleSelectedChange = async (selected) => {\n        this.setState({loading: true})\n        const populations = await populationService.getByISO(selected.value)\n        const emissions = await emissionsService.getByISO(selected.value)\n\n        if (populations !== null && emissions !== null) {\n            this.setState({\n                selected,\n                populations,\n                emissions\n            })\n        } else {\n            this.notify('No data was found for ' + selected.label, 'danger')\n        }\n        this.setState({loading: false})\n    }\n\n    handleRangeChange = (value) => {\n        this.setState({\n            rangeValue: value\n        })\n    }\n\n    handlePerCapitaChange = (checked) => {\n        this.setState({\n            perCapita: checked\n        })\n    }\n\n    notify = (message, messageClass) => {\n        this.setState({\n            notification: {\n                message,\n                messageClass\n            }\n        })\n        setTimeout(() => {\n            this.setState({\n                notification: null\n            })\n        }, 3000)\n    }\n\n    render() {\n\n        return (\n            <div className='container'>\n                <Notification notification={this.state.notification} />\n                <Header title={'CO2 Emissions'} subtitle={'Search by area and compare by capita'} />\n                <Search countries={this.state.countries} setSelected={this.handleSelectedChange} selected={this.state.selected} />\n                <ResultOptions perCapita={this.state.perCapita} togglePerCapita={this.handlePerCapitaChange} rangeValue={this.state.rangeValue} setRange={this.handleRangeChange} rangeLimits={this.state.rangeLimits} />\n                <Result populations={this.state.populations} emissions={this.state.emissions} selected={this.state.selected} perCapita={this.state.perCapita} rangeValue={this.state.rangeValue} loading={this.state.loading}/>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}